.gridContainer {
  display: grid;
  /* grid-template-columns will be set via inline style based on columnCount */
  /* gap will be set via inline style based on columnGap and rowGap */
  width: 100%;
}

/* Individual grid items (StoryCard wrappers) can have their column span set */
/* Example: .gridItemColSpan3 { grid-column: span 3; } */
/* This will be applied dynamically in Grid.tsx */

/* Add vertical line to the right of each grid item, it will appear in the column-gap */
.gridItem::after {
  content: '';
  position: absolute;
  top: 0;
  bottom: 0; /* Or height: 100%; */
  right: calc(-1 * (var(--column-gap, 24px) / 2) - 0.5px); /* Position in middle of gap. Assumes 1px line width */
  width: 1px;
  background-color: #76746D; /* Changed line color */
  opacity: 0.5; /* Added opacity */
  /* We need to prevent this on items that are effectively at the end of a visual row */
  /* This simple version applies to all. Conditional styling is more complex. */
}

/* Prevent the line on items marked as last in their visual row */
.gridItem.isLastInRow::after {
  display: none;
}

/* To prevent the line on the very last item of the grid container if it's not desired */
/* This only works if items don't span and the last child is truly the last visual item in its row */
/* .gridItem:last-child::after { */
/*   display: none; */
/* } */

/* Add any other necessary styles here */ 